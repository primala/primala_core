
drop policy "Enables Broad Permissions if Is a Group Member" on "public"."documents";

revoke delete on table "public"."documents" from "anon";

revoke insert on table "public"."documents" from "anon";

revoke references on table "public"."documents" from "anon";

revoke select on table "public"."documents" from "anon";

revoke trigger on table "public"."documents" from "anon";

revoke truncate on table "public"."documents" from "anon";

revoke update on table "public"."documents" from "anon";

revoke delete on table "public"."documents" from "authenticated";

revoke insert on table "public"."documents" from "authenticated";

revoke references on table "public"."documents" from "authenticated";

revoke select on table "public"."documents" from "authenticated";

revoke trigger on table "public"."documents" from "authenticated";

revoke truncate on table "public"."documents" from "authenticated";

revoke update on table "public"."documents" from "authenticated";

revoke delete on table "public"."documents" from "service_role";

revoke insert on table "public"."documents" from "service_role";

revoke references on table "public"."documents" from "service_role";

revoke select on table "public"."documents" from "service_role";

revoke trigger on table "public"."documents" from "service_role";

revoke truncate on table "public"."documents" from "service_role";

revoke update on table "public"."documents" from "service_role";

alter table "public"."content_blocks" drop constraint "content_blocks_document_id_fkey";

alter table "public"."documents" drop constraint "documents_group_id_fkey";

alter table "public"."documents" drop constraint "documents_parent_document_id_fkey";

alter table "public"."documents" drop constraint "documents_spotlight_content_id_fkey";

alter table "public"."sessions" drop constraint "sessions_active_document_fkey";

alter table "public"."sessions" drop constraint "sessions_current_document_fkey";

drop function if exists "public"."cleanup_expired_documents"();

alter table "public"."documents" drop constraint "documents_pkey";

drop index if exists "public"."documents_pkey";

drop table "public"."documents";


create table "public"."documents" (
    "id" bigint generated by default as identity not null,
    "title" text not null,
    "group_id" bigint,
    "spotlight_content_id" bigint
);


alter table "public"."documents" enable row level security;

-- CREATE UNIQUE INDEX documents_pkey ON public.documents USING btree (id);

-- CREATE UNIQUE INDEX users_email_key ON public.users USING btree (email);

alter table "public"."documents" add constraint "documents_pkey" PRIMARY KEY using index "documents_pkey";

alter table "public"."content_blocks" add constraint "content_blocks_document_id_fkey" FOREIGN KEY (document_id) REFERENCES documents(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."content_blocks" validate constraint "content_blocks_document_id_fkey";

alter table "public"."documents" add constraint "documents_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."documents" validate constraint "documents_group_id_fkey";

alter table "public"."documents" add constraint "documents_spotlight_content_id_fkey" FOREIGN KEY (spotlight_content_id) REFERENCES content_blocks(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."documents" validate constraint "documents_spotlight_content_id_fkey";

-- alter table "public"."users" add constraint "users_email_key" UNIQUE using index "users_email_key";

grant delete on table "public"."documents" to "anon";

grant insert on table "public"."documents" to "anon";

grant references on table "public"."documents" to "anon";

grant select on table "public"."documents" to "anon";

grant trigger on table "public"."documents" to "anon";

grant truncate on table "public"."documents" to "anon";

grant update on table "public"."documents" to "anon";

grant delete on table "public"."documents" to "authenticated";

grant insert on table "public"."documents" to "authenticated";

grant references on table "public"."documents" to "authenticated";

grant select on table "public"."documents" to "authenticated";

grant trigger on table "public"."documents" to "authenticated";

grant truncate on table "public"."documents" to "authenticated";

grant update on table "public"."documents" to "authenticated";

grant delete on table "public"."documents" to "service_role";

grant insert on table "public"."documents" to "service_role";

grant references on table "public"."documents" to "service_role";

grant select on table "public"."documents" to "service_role";

grant trigger on table "public"."documents" to "service_role";

grant truncate on table "public"."documents" to "service_role";

grant update on table "public"."documents" to "service_role";

create policy "Enable Broad Permissions if They Are a Group Member"
on "public"."documents"
as permissive
for all
to authenticated
using (is_group_member(auth.uid(), group_id));


alter
  publication supabase_realtime add table public.documents;

alter table "public"."documents" replica identity full;